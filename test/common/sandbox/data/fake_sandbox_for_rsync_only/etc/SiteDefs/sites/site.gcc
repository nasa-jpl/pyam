# this file contains rules for "gcc" based compilations.
# It can be included by any site-config file for gcc based compilation

#===========================================
export LIBGCC
export LIBSTDCPP
export GCCDIR

# set up flags for specific versions of gcc
ifeq ($(USE_GCC272),true)
     export GCC_VERSION = 2.7.2
else
  ifeq ($(USE_GCC295),)
     USE_GCC295=true
  endif
endif

ifeq ($(USE_GCC295),true)
     export GCC_VERSION = 2.95.1
endif

#===========================================
# Warnings common to both C and C++. We will include these below.
# -ansi is equivalent to -std=c90 in C mode and is equivalent to -std=c++98 in C++ mode.
C_FAMILY_WARNINGS = -ansi -Wall
C_FAMILY_EXTRA_WARNINGS = -pedantic -Wextra -Wcast-qual -Wpointer-arith -Winit-self \
                          -Wswitch-default -Wconversion -Wmissing-include-dirs -Wlogical-op

#===========================================
# C compiler and flags for the native target

ifeq ($(CC),)
    CC		= /home/atbe/pkgs/bin/$(YAM_TARGET)/gcc-$(GCC_VERSION) -pedantic
endif

CC_DEPEND_FLAG	= -MM
# the -ansi flag is a must when used with optimization. Without it,
# inline versions of math functions (bits/mathinline.h) are getting used
# which generate errorneous results (eg. floor)

CC_WARNINGS = $(C_FAMILY_WARNINGS)
CC_EXTRA_WARNINGS = $(C_FAMILY_EXTRA_WARNINGS)

# We disable long long (C90) warning generated by -pedantic
CC_EXTRA_WARNINGS += -Wno-long-long


#=============================================
# C++ compiler and flags for the native target

ifeq ($(CPLUSPLUS),)
     CPLUSPLUS		= /home/atbe/pkgs/bin/$(YAM_TARGET)/gcc-$(GCC_VERSION)
endif

CPLUSPLUS_DEPEND_FLAG   = $(CC_DEPEND_FLAG)
CPLUSPLUS_DEFINES       += $(CC_DEFINES)

# -Woverloaded-virtual is disabled due to currently being too verbose for our code. (Too many false positives.)
CPLUSPLUS_WARNINGS += $(C_FAMILY_WARNINGS)
CPLUSPLUS_EXTRA_WARNINGS += $(C_FAMILY_EXTRA_WARNINGS) -Wold-style-cast -Wnon-virtual-dtor

# We disable long long (C++98) warning generated by -pedantic
CPLUSPLUS_EXTRA_WARNINGS += -Wno-long-long

#export CPLUSPLUS_LIBS	+= $(CC_LIBS) -lstdc++

#-------------------------------------------------------------------
# set GCC_EXEC_PREFIX for LD_SHARED to use

ifeq ($(YAM_TARGET),sparc-sunos5)
    GCC_TARGET = sparc-sun-solaris2.5.1
endif

ifeq ($(YAM_TARGET),sparc-sunos5.6)
    GCC_TARGET = sparc-sun-solaris2.6
endif

ifeq ($(YAM_TARGET),i486-linux)
    GCC_TARGET = i686-pc-linux-gnu
endif

ifeq ($(YAM_TARGET),hppa-hpux9)
    GCC_TARGET = hppa1.1-hp-hpux9.05
endif

ifeq ($(YAM_TARGET),hppa-hpux10)
    GCC_TARGET = hppa1.1-hp-hpux10.20
endif

ifeq ($(YAM_TARGET),mips-irix5)
    GCC_TARGET = mips-sgi-irix6.2
endif

ifeq ($(YAM_TARGET),mips-irix6.5)
    GCC_TARGET = mips-sgi-irix6.5
endif

ifeq ($(GCC_EXEC_PREFIX),)
     GCC_EXEC_PREFIX = /home/atbe/pkgs/lib/gcc-lib/$(GCC_TARGET)/$(GCC_VERSION)
endif

#-------------------------------------------------------------------
# set up flags for specific versions of gcc
ifeq ($(USE_GCC272),true)
     # Tcl seems to need this flag (especially Tcl 7.4)
     export FWRITABLE_STRINGS_OPT = -fwritable-strings
endif

ifeq ($(USE_GCC295),true)
     # This flag is needed for dealing with screwed up X11 header files that
     # gcc 2.95 will choke on
     export FPERMISSIVE_OPT = -fpermissive
endif

#-------------------------------------------------------------------
# set up flags for external templates needed by Dshell++Scripts/YAClasses
export FEXTERNAL_TEMPLATES = -fexternal-templates

#-------------------------------------------------------------------
# The default is to compile with full optimization. To disable
# optimization for debugging purposes set OPT to nothing when invoking
# make, eg. ymk libsso OPT=
OPT ?= true

# normally do not compile C++ code with -ggdb3, because use of templates
# causes the size of compiled code to balloon (for example, "Dshtcl++" can
# grow to almost 15 megabytes!)

ifeq ($(OPT), true)
  CC_OPTIMIZATION		= -g -O3
  CPLUSPLUS_OPTIMIZATION	= -O3 -ggdb3

# -fno-default-inline -finline-functions
else
  # use the following for real debugging, -O3 causes debugger to skip around
  # don't use -f inlining functions without -O3 because you'll get a bunch of
  # multiply defined symbols
  CC_OPTIMIZATION		= -ggdb3
  CPLUSPLUS_OPTIMIZATION	= -ggdb3
endif

#==========================================================

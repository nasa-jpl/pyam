########################################################################
#
#  Created at Thu May 26 15:20:07 2011 by user Unknown
#  Configuration variables are from the 'Dshell.config' file
#
#      !!!!!! DO NOT EDIT THIS FILE !!!!!!
#
#  This file is created by yamInstall. Run yamInstall to update
#  the contents of this file.
#
########################################################################
#
# site.env - set default values for YAM variables
#     YAM_SITE, YAM_NATIVE, YAM_TARGET, YAM_OS, and some RTI variables
#
# include this file from a Makefile
#

#===========================================================
# standard Make options
# this variable can be overridden from the command line to make
# builds stop on error
MAKEOPTS		?= i
MAKEFLAGS		:= rR$(MAKEOPTS)

#MAKEFLAGS  = riR --warn-undefined-variables

# parallel build option
# can be overridden from the command line
YAM_MKPLL ?= -j -l 6


# turn off all implicit rules
.SUFFIXES:


#ifndef YAM_SITE
#  $(error Error: The required 'YAM_SITE' environment variable is undefined.!!!!!!)
#endif

#==================================================================
# initialize some of the standard variables

# used in Makefile.top and bldRules.mk
ALLTGT				  ?=

# function to pretty print target/host information for parallel makes
hostsstr = $(foreach t, $(1), printf "\t%20s -> %s\n"  $(t) $(COMPILE_HOST-$(t)); )


#===========================================================
# this is the default rule
help::

#===========================================================
# rules for modules for that execute for supported as well as unsupported targets
# work modules only
YAM_ALLTGT_WORKMOD_RULES	:= clean
# work and link modules
YAM_ALLTGT_RULES		:= docs sphinxdocs

# rules for both work and link modules
YAM_LINKMOD_RULES		:= regtest pllregtest

# rules for only work modules (for supported targets)
YAM_BUILD_RULES			:= links libs libsso bins
YAM_WORKMOD_RULES		:= $(YAM_BUILD_RULES) lcov cppcheck dkwstyle dpylint coveragepy clean-coveragepy docshtml coverity coverity-html coverity-libs coverity-bins


#===========================================================
# This has to be customized for each site.
# export this variable since it is needed by module-dependencies.pl
export YAM_VERSIONS 	    ?= /home/atbe/repo/YaM/Dshell/Module-Releases

# set list of all known YAM targets
# Be sure add a space before and after each element of this list. This
# will help avoid findstring from finding a match for an element suac
# as sparc-sunos5 when finding sparc-sunos5.6
#
ALL_YAM_OS 	:= unix  vx
unix_targets 	:= hppa-hpux10 hppa-hpux9 i486-cygwin i486-fedora13-linux i486-fedora4-linux i486-fedora6-linux i486-fedora7-linux i486-fedora8-linux i486-fedora9-linux i486-linux i486-mingw i486-rh80-linux i486-rh9-linux i486-suse73-linux i486-visualc mips-irix6.5 mips-irix6.5-gcc sparc-sunos5.9 sparc-sunos5.9-CC x86_64-fedora10-linux x86_64-fedora11-linux x86_64-fedora13-linux x86_64-fedora15-linux x86_64-fedora9-linux x86_64-rhel4-linux
vx_targets 	:= i486-fedora4-64linux i486-fedora9-linux m68k-vxworks ppc-vxworks5.2 ppc-vxworks5.3 ppc-vxworks5.4 ppc-vxworks5.5.1 sun4-vxsim2.0 sun4-vxsim2.2
ALL_YAM_TARGETS := $(unix_targets) $(vx_targets)

# determine site we are compiling for
# different sites can have different configuration files
# which specify compilers to use, compile flags, etc.

ifndef YAM_SITE
#    YAM_SITE	:= telerobotics
endif
export YAM_SITE

#===========================================================
# determine native platform
# if YAM_TARGET is specified and is a unix target, and not a
# cross-compile target then set YAM_NATIVE to its value
ifdef YAM_TARGET
  ifeq  ($(filter $(YAM_TARGET),$(vx_targets)),)
    ifneq  ($(filter $(YAM_TARGET),$(unix_targets)),)
      YAM_NATIVE = $(YAM_TARGET)
    endif
  endif
endif

ifeq ($(YAM_NATIVE),)
  YAM_NATIVE := $(shell $(SITEDEFSHOME)/mkHome/shared/yamNative.sh)
endif

export YAM_NATIVE

#===========================================================
# determine target platform
# this is where the executables should run
# normally this is the same as the native platform unless compiling for VxWorks

YAM_TARGET		?= $(YAM_NATIVE)
export YAM_TARGET

#===========================================================
# determine target OS
ifneq  ($(filter $(YAM_TARGET),$(unix_targets)),)
  YAM_OS 		:= unix
else
  YAM_OS 		:= vx
endif

ifeq ($(YAM_TARGET),i486-cygwin)
  YAM_OS_TMP 		:= windows
endif

ifeq ($(YAM_TARGET),i486-visualc)
  YAM_OS_TMP 		:= windows
endif

YAM_OS		?= unknown

export YAM_OS

#===========================================================
# set the YAM_TARGET to be used for regression tests
REGRESSION_TEST_YAM_TARGET := x86_64-fedora15-linux

#===========================================================
# the command to access remote hosts
RSHCMD 			?= ssh -x
export RSHCMD
